@page "/EditMeta"
@page "/EditMeta/{MetaId:int}";
@inject MetasServices MetasServices
@rendermode InteractiveServer
<PageTitle>Edit Metas</PageTitle>

<EditForm Model="meta" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Editar</h3>
        </div>

        <div class="card-body">
            <div class="col col-4">
                <label class="form-label">Meta Id:</label>
                <InputNumber @bind-Value="meta.MetaId" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => meta.MetaId)"></ValidationMessage>
            </div>

            <div class="col col-4">
                <label class="form-label">Fecha:</label>
                <InputDate @bind-Value="meta.Fecha" class="form-control"></InputDate>
                <ValidationMessage For="@(() => meta.Fecha)"></ValidationMessage>
            </div>

            <div class="col col-4">
                <label class="form-label">Descripci&oacute;n:</label>
                <InputText @bind-Value="meta.Descripcion" class="form-control"></InputText>
                <ValidationMessage For="@(() => meta.Descripcion)"></ValidationMessage>
            </div>

            <div class="col col-4">
                <label class="form-label">Monto:</label>
                <InputNumber @bind-Value="meta.Monto" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => meta.Monto)"></ValidationMessage>
            </div>

        </div>

        <div class="card-footer">
            <div class="input-group">
                <a href="/MetasIndex" class="btn btn-outline-danger bi bi-house-door-fill">Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy-fill">Guardar</button>
            </div>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]
    public int MetaId { get; set; }
    public Metas meta = new Metas();

    protected override async Task OnInitializedAsync()
    {
        if (MetaId > 0)
        {
            meta.MetaId = MetaId;
            await Buscar();
        }
        meta.MetaId = MetaId;
        meta.Fecha = DateTime.Today;
    }

    public void Nuevo()
    {
        this.meta = new Metas();
        meta.Fecha = DateTime.Today;
    }

    public async Task Guardar()
    {
        var guardo = await MetasServices.Guardar(meta);
        if (guardo)
            Nuevo();
    }

    public async Task Buscar()
    {
        var buscar = await MetasServices.Buscar(meta.MetaId);
        if (buscar != null)
        {
            meta = buscar;
        }
    }
}
